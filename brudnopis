



const handleRandomPokemon = async () => {
    try {
      setLoading(true)
      await getAllPokemons(currentPage)
      const maxIndex = allPokemons.length
      const randomIndex = Math.floor(Math.random() * maxIndex)
      const randomPokemonData = await fetch(
        `https://pokeapi.co/api/v2/pokemon/${allPokemons[randomIndex].name}`
      ).then((res) => res.json())
      setRandomPokemon(randomPokemonData)
    } catch (error) {
      console.error('Error fetching random Pokemon:', error)
    } finally {
      setLoading(false)
    }
  }

const [randomPokemon, setRandomPokemon] = useState(null)








.rock {
  background-color: rgb(148, 81, 81);
}
.ghost {
  background-color: rgb(247, 247, 247);
}
.electric {
  background-color: rgb(255, 255, 161);
}
.bug {
  background-color: #F6D6A7;
}
.poison {
  background-color: #e0a7f6;
}
.normal {
  background-color: #F4F4F4;
}
.fairy {
  background-color: rgba(255, 192, 203, 0.863);
}
.fire {
  background-color: #FBE3DF;
}
.grass {
  background-color:#E2F9E1;
}
.water {
  background-color:#E0F1FD;
}

function createPokemonObject (results) {

      results.forEach(async pokemon => {
        
        const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)
        const data = await res.json()
       
        
        setAllPokemons(currentList => [...currentList, data])        
        
        
      })
      
}
    


const handleSearch = async (searchTerm) => {
    setCurrentPage('https://pokeapi.co/api/v2/pokemon?limit=20')
    setAllPokemons([])
    if (searchTerm.trim() !== '') {
      const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${searchTerm.toLowerCase()}`)
      if (res.ok) {
        const data = await res.json()
        setAllPokemons([data])
      }
    } else {
      await getAllPokemons(currentPage)
    }
  }